# -*- coding: utf-8 -*-
"""Calories Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XNLof_AOPdE225T-mJwwHnm8QCWHpWEz
"""

#import Dependencies

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

# loading the data from csv to a pandas dataframe

calories = pd.read_csv('/content/calories.csv')
exercise = pd.read_csv("/content/exercise.csv")

# print the first five rows of the dataframe

calories.head()

exercise.head()

#combining both the dataframes

calories_data = pd.concat([exercise,calories['Calories']],axis=1)
calories_data.head()

# checking the number of rows and columns

calories_data.shape

# getting info about the data

calories_data.info()

#checking for missing values
calories_data.isnull().sum()

"""Data Analysis

"""

#get some statistical measures about the data
calories_data.iloc[:,1:].describe()

"""Data Visualization

"""

sns.set()

# plotting gender column in count plot
# we are using countplot because gender is categorical column and can't use this for age column
sns.countplot(calories_data['Gender'])

# plotting of age column

sns.distplot(calories_data['Age'])

sns.distplot(calories_data['Height'])

sns.distplot(calories_data['Weight'])

#finding the correlation in the dataset
correlation = calories_data.iloc[:,2:].corr()

#constructing a heatmap  to understand the correlation
#high/positive correlation will be like ig duration increases calories increase

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8},cmap='Reds')

#converting the gender column to numerical values male-0 female-1

calories_data.replace({"Gender":{"male":0,"female":1}}, inplace=True) #inplace is used for making a permanent change

calories_data.head()

#Separating features and Target

X = calories_data.drop(columns = ['User_ID','Calories'], axis = 1)# axis 1 represents col and 0 row
Y = calories_data['Calories']

print(X)

print(Y)

#Splitting the data into training data and test data

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2,random_state = 2)

print(X.shape, X_train.shape,X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

# Model Training
# XGBoost Regressor

model = XGBRegressor()

#training the model

model.fit(X_train, Y_train)

#testing the model

prediction = model.predict(X_test)
print(prediction)

mae = metrics.mean_absolute_error(Y_test, prediction)

print("Mean Absolute Error = ", mae)

